{"id":"../node_modules/assert-args/lib/multi-validate.js","dependencies":[{"name":"/Users/snd/projects/itsumma/chat-test/package.json","includedInParent":true,"mtime":1587051154174},{"name":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/package.json","includedInParent":true,"mtime":1587045327654},{"name":"compound-subject","loc":{"line":1,"column":30},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/compound-subject/compound-subject.js"},{"name":"101/is-empty","loc":{"line":2,"column":22},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/is-empty.js"},{"name":"101/is-string","loc":{"line":3,"column":23},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/is-string.js"},{"name":"101/is-function","loc":{"line":4,"column":25},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/is-function.js"},{"name":"./assert-type","loc":{"line":6,"column":25},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/assert-type.js"},{"name":"./is-class.js","loc":{"line":7,"column":22},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/is-class.js"},{"name":"./validate.js","loc":{"line":8,"column":23},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/validate.js"},{"name":"./starts-with-vowel.js","loc":{"line":9,"column":30},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/multi-validate.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/starts-with-vowel.js"}],"generated":{"js":"var compoundSubject = require('compound-subject')\nvar isEmpty = require('101/is-empty')\nvar isString = require('101/is-string')\nvar isFunction = require('101/is-function')\n\nvar assertType = require('./assert-type')\nvar isClass = require('./is-class.js')\nvar validate = require('./validate.js')\nvar startsWithVowel = require('./starts-with-vowel.js')\n\nmodule.exports = multiValidate\n/**\n * validate an argument against multiple validators\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {array} validators array of validators\n */\nfunction multiValidate (key, arg, validators) {\n  var errMessage = '\"' + key + '\" must be '\n  assertType(!isEmpty(validators), '\"validators\" cannot be empty')\n  var typeArr = validators.map(function (validator) {\n    if (isString(validator)) {\n      return validator\n    } else if (isClass(validator)) {\n      return '\"' + validator.name + '\"'\n    } else if (isFunction(validator)) {\n      return 'pass \"' + (validator.name || 'anonymous') + '\"'\n    } else {\n      throw new TypeError('\"validators\" must be an array containing only strings, classes, or functions')\n    }\n  })\n  var typeStr = compoundSubject(typeArr)\n    .endWith('or')\n    .make()\n  var article = startsWithVowel(typeStr) ? 'an' : 'a'\n\n  errMessage += article + ' ' + typeStr\n\n  var passedAnyValidator = validators.some(function (validator) {\n    try {\n      validate(key, arg, validator)\n      return true\n    } catch (e) {\n      return false\n    }\n  })\n\n  if (!passedAnyValidator) {\n    throw new TypeError(errMessage)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/assert-args/lib/multi-validate.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"../node_modules/assert-args/lib/multi-validate.js":"var compoundSubject = require('compound-subject')\nvar isEmpty = require('101/is-empty')\nvar isString = require('101/is-string')\nvar isFunction = require('101/is-function')\n\nvar assertType = require('./assert-type')\nvar isClass = require('./is-class.js')\nvar validate = require('./validate.js')\nvar startsWithVowel = require('./starts-with-vowel.js')\n\nmodule.exports = multiValidate\n/**\n * validate an argument against multiple validators\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {array} validators array of validators\n */\nfunction multiValidate (key, arg, validators) {\n  var errMessage = '\"' + key + '\" must be '\n  assertType(!isEmpty(validators), '\"validators\" cannot be empty')\n  var typeArr = validators.map(function (validator) {\n    if (isString(validator)) {\n      return validator\n    } else if (isClass(validator)) {\n      return '\"' + validator.name + '\"'\n    } else if (isFunction(validator)) {\n      return 'pass \"' + (validator.name || 'anonymous') + '\"'\n    } else {\n      throw new TypeError('\"validators\" must be an array containing only strings, classes, or functions')\n    }\n  })\n  var typeStr = compoundSubject(typeArr)\n    .endWith('or')\n    .make()\n  var article = startsWithVowel(typeStr) ? 'an' : 'a'\n\n  errMessage += article + ' ' + typeStr\n\n  var passedAnyValidator = validators.some(function (validator) {\n    try {\n      validate(key, arg, validator)\n      return true\n    } catch (e) {\n      return false\n    }\n  })\n\n  if (!passedAnyValidator) {\n    throw new TypeError(errMessage)\n  }\n}\n"},"lineCount":52}},"error":null,"hash":"d9df49fd95d4beb9411cb3e56fe6bd6d","cacheData":{"env":{}}}