{"id":"../node_modules/101/not.js","dependencies":[{"name":"/Users/snd/projects/itsumma/chat-test/package.json","includedInParent":true,"mtime":1587051154174},{"name":"/Users/snd/projects/itsumma/chat-test/node_modules/101/package.json","includedInParent":true,"mtime":1587045327653},{"name":"./is-function","loc":{"line":5,"column":25},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/101/not.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/is-function.js"}],"generated":{"js":"/**\n * @module 101/not\n */\n\nvar isFunction = require('./is-function');\n\n/**\n * Functional version of !\n * @function module:101/not\n * @param {*} val - value to inverse\n * @return {function} - function whose arguments and context are applied to fn and result is inversed\n */\nmodule.exports = not;\n\nfunction not (val) {\n  if (isFunction(val)) {\n    return function (/* args */) {\n      return not(val.apply(this, arguments));\n    };\n  }\n  else {\n    return !val;\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/101/not.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/101/not.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../node_modules/101/not.js":"/**\n * @module 101/not\n */\n\nvar isFunction = require('./is-function');\n\n/**\n * Functional version of !\n * @function module:101/not\n * @param {*} val - value to inverse\n * @return {function} - function whose arguments and context are applied to fn and result is inversed\n */\nmodule.exports = not;\n\nfunction not (val) {\n  if (isFunction(val)) {\n    return function (/* args */) {\n      return not(val.apply(this, arguments));\n    };\n  }\n  else {\n    return !val;\n  }\n}"},"lineCount":24}},"error":null,"hash":"3dd920d0e8bf4ef3dbfc60686acde9ee","cacheData":{"env":{}}}