{"id":"../node_modules/assert-args/index.js","dependencies":[{"name":"/Users/snd/projects/itsumma/chat-test/package.json","includedInParent":true,"mtime":1587051154174},{"name":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/package.json","includedInParent":true,"mtime":1587045327654},{"name":"debug","loc":{"line":1,"column":20},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/node_modules/debug/src/browser.js"},{"name":"101/exists","loc":{"line":2,"column":21},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/exists.js"},{"name":"101/is-object","loc":{"line":3,"column":23},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/is-object.js"},{"name":"101/not","loc":{"line":4,"column":18},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/101/not.js"},{"name":"./lib/is-optional-key.js","loc":{"line":6,"column":28},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/is-optional-key.js"},{"name":"./lib/is-spread-key.js","loc":{"line":7,"column":26},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/is-spread-key.js"},{"name":"./lib/validate.js","loc":{"line":8,"column":23},"parent":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/index.js","resolved":"/Users/snd/projects/itsumma/chat-test/node_modules/assert-args/lib/validate.js"}],"generated":{"js":"var debug = require('debug')('assert-args')\nvar exists = require('101/exists')\nvar isObject = require('101/is-object')\nvar not = require('101/not')\n\nvar isOptionalKey = require('./lib/is-optional-key.js')\nvar isSpreadKey = require('./lib/is-spread-key.js')\nvar validate = require('./lib/validate.js')\n\nvar isRequiredKey = not(isOptionalKey)\n\nmodule.exports = assertArgs\n\nfunction assertArgs (args, validation) {\n  if (typeof args !== 'object' || !exists(args.length)) {\n    throw new TypeError('\"args\" must be an array or array-like object (arguments)')\n  }\n  if (!isObject(validation)) { // strict object\n    throw new TypeError('\"validation\" must be an object')\n  }\n\n  // copy args\n  var argsLeft = Array.prototype.slice.call(args)\n  var firstOptionalErr\n  var ret = {}\n  var argKeys = Object.keys(validation)\n  var outKey\n\n  if (argKeys.filter(isSpreadKey).length > 1) {\n    throw new Error('assert-args only supports a single spread argument')\n  }\n\n  argKeys.forEach(function (key, i) {\n    var spreadArgs\n    var validator = validation[key]\n    var arg = argsLeft[0]\n\n    if (isSpreadKey(key)) {\n      debug('is spread key: ' + key)\n      debug('argKeys.length', argKeys.length)\n      debug('argsLeft.length', argsLeft.length)\n      var requiredKeysLeft = argKeys.slice(i + 1).filter(isRequiredKey)\n      debug('requiredKeysLeft', requiredKeysLeft)\n      spreadArgs = argsLeft.slice(0, argsLeft.length - requiredKeysLeft.length) // copy\n      debug('spreadArgs', spreadArgs)\n      debug('spreadArgs.length', spreadArgs.length)\n\n      if (isOptionalKey(key)) {\n        debug('is optional spread key: ' + key)\n        outKey = key.slice(4, -1)\n        ret[outKey] = []\n\n        spreadArgs.forEach(function (arg) {\n          if (!exists(arg)) {\n            // non-existant args pass as optional args\n            firstOptionalErr = null // reset after a pass\n            argsLeft.shift() // pass, remains [...]\n            return\n          }\n          try {\n            validate(key.slice(1, -1), arg, validator, true)\n            // optional arg passes validator\n            firstOptionalErr = null\n            ret[outKey].push(arg) // pass\n            argsLeft.shift()\n          } catch (err) {\n            debug('spread validate err: ' + err.message)\n            debug('spread validate argsLeft: ' + argsLeft)\n            if (firstOptionalErr) {\n              // other optional error already occurred, throw first.\n              throw firstOptionalErr\n            } else {\n              firstOptionalErr = err\n            }\n          }\n        })\n      } else { // isSpreadKey && isRequiredKey\n        debug('is required spread key: ' + key)\n        outKey = key.slice(3)\n        ret[outKey] = []\n\n        if (spreadArgs.length === 0) {\n          // missing trailing required arg, fail\n          throw new TypeError('\"' + key + '\" is required')\n        }\n        spreadArgs.forEach(function (arg) {\n          try {\n            validate(key, arg, validator, true)\n            // optional arg passes validator\n            firstOptionalErr = null\n            ret[outKey].push(arg) // pass\n            argsLeft.shift()\n          } catch (err) {\n            debug('spread validate err: ' + err.message)\n            debug('spread validate argsLeft: ' + argsLeft)\n            debug('spread validate argKeys: ' + argKeys)\n\n            if (i === (argKeys.length - 1)) {\n              // spread is last arg.\n              // spread assumes all args passed are used.\n              // there are no args left. and this failed for spread. throw it.\n              if (firstOptionalErr) {\n                if ((argsLeft.length - 1) > requiredKeysLeft.length) {\n                  throw firstOptionalErr\n                } else {\n                  throw err\n                }\n              } else {\n                throw err\n              }\n            } else {\n              // leading/middle spread arg\n              if (firstOptionalErr) {\n                // other optional error already occurred, throw first.\n                throw firstOptionalErr\n              } else {\n                // set optional err\n                firstOptionalErr = err\n              }\n            }\n          }\n        })\n      }\n      return\n    } else if (isOptionalKey(key)) {\n      debug('is optional key: ' + key)\n      key = key.slice(1, -1)\n\n      if (argsLeft.length === 0) {\n        // missing trailing optional arg, pass\n        ret[key] = undefined\n        return\n      } else if (!exists(arg)) {\n        // non-existant args pass as optional args\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift() // pass\n        return\n      }\n\n      try {\n        validate(key, arg, validator)\n        // optional arg passes validator\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift()\n        return\n      } catch (err) {\n        // optional arg failed validator\n        // * set as undefined and pass for now\n        // * save the error in case there are no more required args\n        firstOptionalErr = firstOptionalErr || err\n        ret[key] = undefined\n        return\n      }\n    } else { // isRequiredKey\n      debug('is required key: ' + key)\n      if (argsLeft.length === 0) {\n        // missing trailing required arg, fail\n        throw new TypeError('\"' + key + '\" is required')\n      }\n      try {\n        validate(key, arg, validator)\n        // required arg passes validator, pass\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift()\n      } catch (err) {\n        if (firstOptionalErr && argsLeft.length > 1) {\n          // optional err was thrown before and this is not the last arg\n          throw firstOptionalErr\n        }\n        throw err\n      }\n      return\n    }\n  })\n\n  if (firstOptionalErr) {\n    throw firstOptionalErr\n  }\n\n  return ret\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/assert-args/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/assert-args/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}}],"sources":{"../node_modules/assert-args/index.js":"var debug = require('debug')('assert-args')\nvar exists = require('101/exists')\nvar isObject = require('101/is-object')\nvar not = require('101/not')\n\nvar isOptionalKey = require('./lib/is-optional-key.js')\nvar isSpreadKey = require('./lib/is-spread-key.js')\nvar validate = require('./lib/validate.js')\n\nvar isRequiredKey = not(isOptionalKey)\n\nmodule.exports = assertArgs\n\nfunction assertArgs (args, validation) {\n  if (typeof args !== 'object' || !exists(args.length)) {\n    throw new TypeError('\"args\" must be an array or array-like object (arguments)')\n  }\n  if (!isObject(validation)) { // strict object\n    throw new TypeError('\"validation\" must be an object')\n  }\n\n  // copy args\n  var argsLeft = Array.prototype.slice.call(args)\n  var firstOptionalErr\n  var ret = {}\n  var argKeys = Object.keys(validation)\n  var outKey\n\n  if (argKeys.filter(isSpreadKey).length > 1) {\n    throw new Error('assert-args only supports a single spread argument')\n  }\n\n  argKeys.forEach(function (key, i) {\n    var spreadArgs\n    var validator = validation[key]\n    var arg = argsLeft[0]\n\n    if (isSpreadKey(key)) {\n      debug('is spread key: ' + key)\n      debug('argKeys.length', argKeys.length)\n      debug('argsLeft.length', argsLeft.length)\n      var requiredKeysLeft = argKeys.slice(i + 1).filter(isRequiredKey)\n      debug('requiredKeysLeft', requiredKeysLeft)\n      spreadArgs = argsLeft.slice(0, argsLeft.length - requiredKeysLeft.length) // copy\n      debug('spreadArgs', spreadArgs)\n      debug('spreadArgs.length', spreadArgs.length)\n\n      if (isOptionalKey(key)) {\n        debug('is optional spread key: ' + key)\n        outKey = key.slice(4, -1)\n        ret[outKey] = []\n\n        spreadArgs.forEach(function (arg) {\n          if (!exists(arg)) {\n            // non-existant args pass as optional args\n            firstOptionalErr = null // reset after a pass\n            argsLeft.shift() // pass, remains [...]\n            return\n          }\n          try {\n            validate(key.slice(1, -1), arg, validator, true)\n            // optional arg passes validator\n            firstOptionalErr = null\n            ret[outKey].push(arg) // pass\n            argsLeft.shift()\n          } catch (err) {\n            debug('spread validate err: ' + err.message)\n            debug('spread validate argsLeft: ' + argsLeft)\n            if (firstOptionalErr) {\n              // other optional error already occurred, throw first.\n              throw firstOptionalErr\n            } else {\n              firstOptionalErr = err\n            }\n          }\n        })\n      } else { // isSpreadKey && isRequiredKey\n        debug('is required spread key: ' + key)\n        outKey = key.slice(3)\n        ret[outKey] = []\n\n        if (spreadArgs.length === 0) {\n          // missing trailing required arg, fail\n          throw new TypeError('\"' + key + '\" is required')\n        }\n        spreadArgs.forEach(function (arg) {\n          try {\n            validate(key, arg, validator, true)\n            // optional arg passes validator\n            firstOptionalErr = null\n            ret[outKey].push(arg) // pass\n            argsLeft.shift()\n          } catch (err) {\n            debug('spread validate err: ' + err.message)\n            debug('spread validate argsLeft: ' + argsLeft)\n            debug('spread validate argKeys: ' + argKeys)\n\n            if (i === (argKeys.length - 1)) {\n              // spread is last arg.\n              // spread assumes all args passed are used.\n              // there are no args left. and this failed for spread. throw it.\n              if (firstOptionalErr) {\n                if ((argsLeft.length - 1) > requiredKeysLeft.length) {\n                  throw firstOptionalErr\n                } else {\n                  throw err\n                }\n              } else {\n                throw err\n              }\n            } else {\n              // leading/middle spread arg\n              if (firstOptionalErr) {\n                // other optional error already occurred, throw first.\n                throw firstOptionalErr\n              } else {\n                // set optional err\n                firstOptionalErr = err\n              }\n            }\n          }\n        })\n      }\n      return\n    } else if (isOptionalKey(key)) {\n      debug('is optional key: ' + key)\n      key = key.slice(1, -1)\n\n      if (argsLeft.length === 0) {\n        // missing trailing optional arg, pass\n        ret[key] = undefined\n        return\n      } else if (!exists(arg)) {\n        // non-existant args pass as optional args\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift() // pass\n        return\n      }\n\n      try {\n        validate(key, arg, validator)\n        // optional arg passes validator\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift()\n        return\n      } catch (err) {\n        // optional arg failed validator\n        // * set as undefined and pass for now\n        // * save the error in case there are no more required args\n        firstOptionalErr = firstOptionalErr || err\n        ret[key] = undefined\n        return\n      }\n    } else { // isRequiredKey\n      debug('is required key: ' + key)\n      if (argsLeft.length === 0) {\n        // missing trailing required arg, fail\n        throw new TypeError('\"' + key + '\" is required')\n      }\n      try {\n        validate(key, arg, validator)\n        // required arg passes validator, pass\n        firstOptionalErr = null\n        ret[key] = argsLeft.shift()\n      } catch (err) {\n        if (firstOptionalErr && argsLeft.length > 1) {\n          // optional err was thrown before and this is not the last arg\n          throw firstOptionalErr\n        }\n        throw err\n      }\n      return\n    }\n  })\n\n  if (firstOptionalErr) {\n    throw firstOptionalErr\n  }\n\n  return ret\n}\n"},"lineCount":182}},"error":null,"hash":"96cdb1ae4254e508b250e8c6f41da7cd","cacheData":{"env":{}}}